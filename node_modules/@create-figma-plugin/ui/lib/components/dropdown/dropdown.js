import { h } from 'preact';
import { useCallback, useRef, useState } from 'preact/hooks';
import menuStyles from '../../css/menu.module.css';
import { useMouseDownOutside } from '../../hooks/use-mouse-down-outside.js';
import { useScrollableMenu } from '../../hooks/use-scrollable-menu.js';
import { IconControlChevronDown8 } from '../../icons/icon-8/icon-control-chevron-down-8.js';
import { IconMenuCheckmarkChecked16 } from '../../icons/icon-16/icon-menu-checkmark-checked-16.js';
import { createClassName } from '../../utilities/create-class-name.js';
import { getCurrentFromRef } from '../../utilities/get-current-from-ref.js';
import dropdownStyles from './dropdown.module.css';
import { INVALID_ID, ITEM_ID_DATA_ATTRIBUTE_NAME } from './private/constants.js';
import { updateMenuElementLayout } from './private/update-menu-element-layout.js';
export function Dropdown({ disabled = false, icon, name, options, onChange = function () { }, onValueChange = function () { }, placeholder, value, variant, ...rest }) {
    if (typeof icon === 'string' && icon.length !== 1) {
        throw new Error(`String \`icon\` must be a single character: ${icon}`);
    }
    const rootElementRef = useRef(null);
    const menuElementRef = useRef(null);
    const [isMenuVisible, setIsMenuVisible] = useState(false);
    const index = findOptionIndexByValue(options, value);
    if (value !== null && index === -1) {
        throw new Error(`Invalid \`value\`: ${value}`);
    }
    const [selectedId, setSelectedId] = useState(index === -1 ? INVALID_ID : `${index}`);
    const children = typeof options[index] === 'undefined'
        ? ''
        : getDropdownOptionValue(options[index]);
    const { handleScrollableMenuKeyDown, handleScrollableMenuItemMouseMove } = useScrollableMenu({
        itemIdDataAttributeName: ITEM_ID_DATA_ATTRIBUTE_NAME,
        menuElementRef,
        selectedId: selectedId,
        setSelectedId: setSelectedId
    });
    const triggerBlur = useCallback(function () {
        setIsMenuVisible(false);
        setSelectedId(INVALID_ID);
        getCurrentFromRef(rootElementRef).blur();
    }, []);
    const triggerUpdateMenuElementLayout = useCallback(function (selectedId) {
        const rootElement = getCurrentFromRef(rootElementRef);
        const menuElement = getCurrentFromRef(menuElementRef);
        updateMenuElementLayout(rootElement, menuElement, selectedId);
    }, []);
    const handleRootFocus = useCallback(function () {
        if (isMenuVisible === true) {
            return;
        }
        setIsMenuVisible(true);
        if (value === null) {
            triggerUpdateMenuElementLayout(selectedId);
            return;
        }
        const index = findOptionIndexByValue(options, value);
        if (index === -1) {
            throw new Error(`Invalid \`value\`: ${value}`);
        }
        const newSelectedId = `${index}`;
        setSelectedId(newSelectedId);
        triggerUpdateMenuElementLayout(newSelectedId);
    }, [isMenuVisible, options, selectedId, triggerUpdateMenuElementLayout, value]);
    const handleRootKeyDown = useCallback(function (event) {
        if (event.key === 'Escape' || event.key === 'Tab') {
            triggerBlur();
            return;
        }
        if (event.key === 'Enter') {
            if (selectedId !== INVALID_ID) {
                const selectedElement = getCurrentFromRef(menuElementRef).querySelector(`[${ITEM_ID_DATA_ATTRIBUTE_NAME}='${selectedId}']`);
                if (selectedElement === null) {
                    throw new Error('Invariant violation');
                }
                selectedElement.checked = true;
                const changeEvent = document.createEvent('Event');
                changeEvent.initEvent('change', true, true);
                selectedElement.dispatchEvent(changeEvent);
            }
            triggerBlur();
            return;
        }
        handleScrollableMenuKeyDown(event);
    }, [handleScrollableMenuKeyDown, selectedId, triggerBlur]);
    const handleRootMouseDown = useCallback(function (event) {
        if (isMenuVisible === false) {
            return;
        }
        event.preventDefault();
        triggerBlur();
    }, [isMenuVisible, triggerBlur]);
    const handleMenuMouseDown = useCallback(function (event) {
        event.stopPropagation();
    }, []);
    const handleOptionChange = useCallback(function (event) {
        const id = event.currentTarget.getAttribute(ITEM_ID_DATA_ATTRIBUTE_NAME);
        const optionValue = options[parseInt(id, 10)];
        const newValue = optionValue.value;
        onValueChange(newValue, name);
        onChange(event);
        triggerBlur();
    }, [name, onChange, onValueChange, options, triggerBlur]);
    const handleMouseDownOutside = useCallback(function () {
        if (isMenuVisible === false) {
            return;
        }
        triggerBlur();
    }, [isMenuVisible, triggerBlur]);
    useMouseDownOutside({
        onMouseDownOutside: handleMouseDownOutside,
        ref: rootElementRef
    });
    return (h("div", { ...rest, ref: rootElementRef, class: createClassName([
            dropdownStyles.dropdown,
            typeof variant === 'undefined'
                ? null
                : variant === 'border'
                    ? dropdownStyles.hasBorder
                    : null,
            typeof icon === 'undefined' ? null : dropdownStyles.hasIcon,
            disabled === true ? dropdownStyles.disabled : null
        ]), onFocus: handleRootFocus, onKeyDown: disabled === true ? undefined : handleRootKeyDown, onMouseDown: handleRootMouseDown, tabIndex: disabled === true ? -1 : 0 },
        typeof icon === 'undefined' ? null : (h("div", { class: dropdownStyles.icon }, icon)),
        value === null ? (typeof placeholder === 'undefined' ? (h("div", { class: dropdownStyles.empty })) : (h("div", { class: createClassName([
                dropdownStyles.value,
                dropdownStyles.placeholder
            ]) }, placeholder))) : (h("div", { class: dropdownStyles.value }, children)),
        h("div", { class: dropdownStyles.chevronIcon },
            h(IconControlChevronDown8, null)),
        variant === 'underline' ? (h("div", { class: dropdownStyles.underline })) : null,
        h("div", { class: dropdownStyles.border }),
        h("div", { ref: menuElementRef, class: createClassName([
                menuStyles.menu,
                dropdownStyles.menu,
                disabled === true || isMenuVisible === false
                    ? menuStyles.hidden
                    : null
            ]), onMouseDown: handleMenuMouseDown }, options.map(function (option, index) {
            if ('separator' in option) {
                return h("hr", { key: index, class: menuStyles.optionSeparator });
            }
            if ('header' in option) {
                return (h("h1", { key: index, class: menuStyles.optionHeader }, option.header));
            }
            return (h("label", { key: index, class: createClassName([
                    menuStyles.optionValue,
                    option.disabled === true
                        ? menuStyles.optionValueDisabled
                        : null,
                    option.disabled !== true && `${index}` === selectedId
                        ? menuStyles.optionValueSelected
                        : null
                ]) },
                h("input", { checked: value === option.value, class: menuStyles.input, disabled: option.disabled === true, name: name, onChange: value === option.value ? undefined : handleOptionChange, onClick: value === option.value ? triggerBlur : undefined, onMouseMove: handleScrollableMenuItemMouseMove, tabIndex: -1, type: "radio", value: `${option.value}`, [ITEM_ID_DATA_ATTRIBUTE_NAME]: `${index}` }),
                option.value === value ? (h("div", { class: menuStyles.checkIcon },
                    h(IconMenuCheckmarkChecked16, null))) : null,
                typeof option.text === 'undefined' ? option.value : option.text));
        }))));
}
function getDropdownOptionValue(option) {
    if ('text' in option) {
        return option.text;
    }
    if ('value' in option) {
        return option.value;
    }
    throw new Error('Invariant violation');
}
function findOptionIndexByValue(options, value) {
    if (value === null) {
        return -1;
    }
    let index = 0;
    for (const option of options) {
        if ('value' in option && option.value === value) {
            return index;
        }
        index += 1;
    }
    return -1;
}
//# sourceMappingURL=dropdown.js.map